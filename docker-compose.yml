services:
  zookeeper:
    restart: always
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper-volume:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - app-network

  kafka:
    restart: always
    image: docker.io/bitnami/kafka:3.3
    ports:
      - "9093:9093"
    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      retries: 30
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network

  data-ingestion:
    build:
      context: ./data-ingestion
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - mongodb
    ports:
      - 8080:8080
    environment:
      - KAFKA_SERVERS=kafka:9092
      - KAFKA_TOPIC=incoming-data
      - MONGO_URI=mongodb://mongodb:27017
      - MONGO_DB=llmtoprod_db
      - MONGO_COLLECTION=kafka_messages
      - API_URL=https://api.example.com/data
    networks:
      - app-network

volumes:
  mongodb_data:
  kafka-volume:
  zookeeper-volume:

networks:
  app-network:
    driver: bridge