services:
  redpanda:
    image: redpandadata/redpanda:latest
    command:
      - redpanda start
      - --smp 2
      - --overprovisioned
      - --node-id 0
      - --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9093
      - --advertise-kafka-addr PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9093
      - --memory 4G
    ports:
      - "9093:9093"
      - "29092:29092"
    volumes:
      - redpanda-data:/var/lib/redpanda/data
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 6G
        reservations:
          memory: 3G

  preprocessing:
    build:
      context: data_processing
      dockerfile: Dockerfile
    networks:
      - kafka-network
    volumes:
      - ./common:/app/common
    depends_on:
      - redpanda
      - spark

  vector-storing:
    build:
      context: ./vector-storing
      dockerfile: Dockerfile
    networks:
      - kafka-network
    volumes:
      - ./common:/app/common
      - ./vector-storing:/app
    depends_on:
      - redpanda
      - qdrant


  mongodb:
    image: mongo:latest
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:172.20.0.1"
    healthcheck:
      test: echo "rs.status().ok" | mongosh --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - ./init-replica.sh:/docker-entrypoint-initdb.d/init-replica.sh
      - mongodb_data:/data/db
    networks:
      - kafka-network



  #  data_ingestion:
  #    build:
  #      context: ./data_ingestion
  #      dockerfile: Dockerfile
  #    depends_on:
  #      kafka:
  #        condition: service_healthy
  #      mongodb:
  #        condition: service_healthy
  #    ports:
  #      - 8080:8080
  #    environment:
  #      - KAFKA_SERVERS=kafka:9092
  #      - KAFKA_TOPIC=incoming-data
  #      - MONGO_URI=mongodb://mongodb:27017
  #      - MONGO_DB=llmtoprod_db
  #      - MONGO_COLLECTION=kafka_messages
  #      - API_URL=https://api.example.com/data
  #    networks:
  #      - app-network


  spark:
    image: bitnami/spark:3.5
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    #      - SPARK_WORKER_MEMORY=8g
    ports:
      - "8090:8080"
      - "7077:7077"
    volumes:
      - spark-volume:/bitnami
    networks:
      - kafka-network
    deploy:
      resources:
        limits:
          memory: 10G
        reservations:
          memory: 8G
    depends_on:
      - redpanda


  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    container_name: qdrant
    ports:
      - 6333:6333
    expose:
      - 6333
    configs:
      - source: qdrant_config
        target: /qdrant/config/production.yaml
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - kafka-network
    depends_on:
      - spark


  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    ports:
      - "8081:8080"
    environment:
      - KAFKA_BROKERS=redpanda:29092
    depends_on:
      - redpanda
    networks:
      - kafka-network


configs:
  qdrant_config:
    content: |
      log_level: INFO

volumes:
  redpanda-data:
  spark-volume:
  qdrant_data:
  mongodb_data:

networks:
  kafka-network:
    driver: bridge
